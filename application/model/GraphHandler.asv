classdef GraphHandler 
    properties
        ContinuousNodesNames = ["audio_naive:mfcc0:std", ...
            "audio_naive:mfcc1:mean", ...
            "audio_naive:mfcc3:mean", ...
            "audio_naive:mfcc3:std", ...
            "audio_naive:mfcc5:mean", ...
            "audio_naive:mfcc5:std", ...
            "audio_naive:mfcc6:mean", ...
            "audio_naive:mfcc6:std", ...
            "audio_naive:mfcc7:mean", ...
            "audio_naive:mfcc9:mean", ...
            "audio_naive:mfcc9:std", ...
            "audio_naive:mfcc11:std", ...
            "audio_naive:mfcc12:mean", ...
            "audio_properties:max_abs_value", ...
            "lf_measurements:battery_level", ...
            "lf_measurements:light", ...
            "lf_measurements:pressure", ...
            "lf_measurements:proximity_cm", ...
            "lf_measurements:relative_humidity", ...
            "lf_measurements:temperature_ambient", ...
            "location:log_longitude_range", ...
            "location:max_speed", ...
            "location:min_speed", ...
            "proc_gyro:3d:std_x", ...
            "proc_gyro:3d:std_y", ...
            "raw_acc:3d:mean_y", ...
            "raw_acc:3d:mean_z", ...
            "raw_acc:3d:ro_xz", ...
            "raw_acc:3d:std_x", ...
            "raw_acc:3d:std_y", ...
            "raw_magnet:3d:mean_x", ...
            "raw_magnet:3d:mean_z", ...
            "raw_magnet:3d:ro_xy", ...
            "raw_magnet:3d:ro_xz", ...
            "raw_magnet:3d:ro_yz", ...
            "raw_magnet:3d:std_x", ...
            "watch_acceleration:3d:std_z", ...
            "watch_heading:std_cos"];
        DiscreteNodesNames = ["discrete:battery_plugged", ...
            "discrete:ringer_mode", ...
            "discrete:time_of_day", ...
            "discrete:wifi_status"];
        LabelNodesNames = ["label:LYING_DOWN", ...
            "label:SITTING", ...
            "label:FIX_walking", ...
            "label:FIX_running", ...
            "label:BICYCLING", ...
            "label:SLEEPING", ...
            "label:PHONE_ON_TABLE", ...
            "label:LOC_home", ...
            "label:IN_A_MEETING", ...
            "label:WITH_FRIENDS", ...
            "label:EATING", ...
            "label:SURFING_THE_INTERNET", ...
            "label:OR_outside", ...
            "label:IN_A_CAR"];
        AllNodesNames
        FeaturesHandler
    end
    
    methods
        function obj = GraphHandler(featuresHandler)
            obj.AllNodesNames = [obj.ContinuousNodesNames obj.DiscreteNodesNames obj.LabelNodesNames];
            obj.FeaturesHandler = featuresHandler;
        end
        
        function index = GetNodesIndex(obj, nodeDescription)
            [~, index] = intersect(obj.AllNodesNames, nodeDescription, "stable");
            index = transpose(index);
        end
        
        function index = GetLabelsIndex(obj)
            [~, index] = intersect(obj.AllNodesNames, obj.LabelNodesNames, "stable");
            index = transpose(index);
        end
        
        function index = GetFeaturesIndex(obj)
            [~, index] = intersect(obj.AllNodesNames, [obj.ContinuousNodesNames, obj.DiscreteNodesNames], "stable");
            index = transpose(index);
        end
        
        function index = GetContinousFeaturesIndex(obj)
            [~, index] = intersect(obj.AllNodesNames, obj.ContinuousNodesNames, "stable");
            index = transpose(index);
        end
        
        function index = GetDiscreteFeaturesIndex(obj)
            [~, index] = intersect(obj.AllNodesNames, obj.DiscreteNodesNames, "stable");
            index = transpose(index);
        end
        
        function sensorData = RawDataToGraphData(obj, features, labels)
            % Bnet doesn't support 0 values, so we have to increase all
            % discrete nodes by 1
            labels = labels + 1;
            featuresDescription = [obj.ContinuousNodesNames ];
            features = features(:, obj.FeaturesHandler.GetFeatureIndex());
            
            sensorData = [features labels];
            sensorData = num2cell(sensorData');
            sensorData(cellfun(@isnan,sensorData)) = {[]};
        end
        
        function nodes = GenerateNodes(obj)
            featuresMapping = getFeaturesMapping();
            labels = keys(featuresMapping);
            features = values(featuresMapping);
            nodes = [];
            for i = 1:length(featuresMapping)
                nodes = [nodes GraphNode(labels{i}, features{i})];
            end
        end
    end
end

